type EggDistributionInfo @entity {
  id: ID!
  releasedAmount: Int
  distributedAmount: Int
  lastBlock: BigInt
  numberOfTypes: BigInt
}

type DistributedEgg @entity {
  id: ID!
  index: Int!
  price: BigInt!
  blockNumber: BigInt!
  owner: User
  egg: Egg
}

type User @entity {
  id: ID! # Address
  name: String
  dragons: [Dragon!] @derivedFrom(field: "owner")
  eggs: [Egg!] @derivedFrom(field: "owner")
  goldSellOffer: GoldAuction
  goldBuyOffer: GoldAuction
  battlesStat: UserBattlesStat!
  battlesWon: [Battle!] @derivedFrom(field: "winnerUser")
  battlesDefeated: [Battle!] @derivedFrom(field: "looserUser")
}

type UserBattlesStat @entity {
  id: ID!
  wins: Int!
  defeats: Int!
}

type Dragon @entity {
  id: ID!
  owner: User
  types: [Int!]!
  parsedTypes: [DragonType!]! # TODO: Remove
  genome: [Int!]!
  skills: DragonSkill!
  birthDay: BigInt!
  generation: Int!
  experience: Int!
  dnaPoints: Int!
  coolness: BigInt!
  isBreedingAllowed: Boolean!
  level: Int!
  tactics: DragonTactic! # TODO: tactic
  auction: Auction
  name: String
  parents: [Dragon!]!
  dragonsChildren: [Dragon!] @derivedFrom(field: "parents")
  eggsChildren: [Egg!] @derivedFrom(field: "parents")
  fromEgg: Egg!
  healthAndMana: DragonHealthAndMana!
  battlesStat: DragonBattlesStat!
  specialAttack: DragonSpecialAttack!
  specialDefense: DragonSpecialDefense!
  specialPeacefulSkill: DragonSpecialPeacefulSkill
  buffs: [BigInt!]! # TODO: Make it an object
  strength: BigInt!
  battlesWon: [Battle!] @derivedFrom(field: "winnerDragon")
  battlesDefeated: [Battle!] @derivedFrom(field: "looserDragon")
  etherSpent: BigInt
  gladiatorBattle: GladiatorBattle
  lastBattleDate: BigInt
}

type Egg @entity {
  id: ID!
  owner: User
  birthDay: BigInt!
  isInNest: Boolean!
  nestPlacementDate: BigInt
  isHatched: Boolean!
  hatchedDragon: Dragon
  auction: Auction
  generation: Int!
  coolness: BigInt!
  parents: [Dragon!]!
  momDragonTypes: [Int!]!
  dadDragonTypes: [Int!]!
  types: [Int!]!
  parsedTypes: [DragonType!]! # TODO: Remove
  etherSpent: BigInt
}

type DragonTactic @entity {
  id: ID!
  melee: Int!
  attack: Int!
}

type DragonBattlesStat @entity {
  id: ID!
  wins: Int!
  defeats: Int!
}

type DragonSkill @entity {
  id: ID!
  attack: BigInt!
  defense: BigInt!
  stamina: BigInt!
  speed: BigInt!
  intelligence: BigInt!
}

type DragonSpecialAttack @entity {
  id: ID!
  dragonType: Int!
  cost: BigInt!
  factor: Int!
  chance: Int!
}

type DragonSpecialDefense @entity {
  id: ID!
  dragonType: Int!
  cost: BigInt!
  factor: Int!
  chance: Int!
}

type DragonSpecialPeacefulSkill @entity {
  id: ID!
  dragon: Dragon!
  skillClass: Int!
  cost: BigInt!
  effect: BigInt!
  usageDate: BigInt
  price: BigInt # TODO: Add purchasing history
}

type DragonHealthAndMana @entity {
  id: ID!
  timestamp: BigInt!
  maxHealth: BigInt!
  maxMana: BigInt!
  remainingHealth: BigInt!
  remainingMana: BigInt!
}

type BattleHealthAndMana @entity {
  id: ID!
  maxHealth: BigInt!
  maxMana: BigInt!
  initHealth: BigInt!
  initMana: BigInt!
}

type Auction @entity {
  id: ID!
  dragon: Dragon
  egg: Egg
  dragonTypes: [DragonType!]! # TODO: Remove when nested filters are implemented
  tokenGeneration: Int! # TODO: Remove
  tokenCoolness: BigInt! # TODO: Remove
  type: AuctionType!
  currency: Currency!
  status: AuctionStatus!
  startPrice: BigInt!
  endPrice: BigInt!
  currentPrice: BigInt!
  seller: User!
  period: Int!
  created: BigInt!
  buyer: User
  purchasePrice: BigInt
  ended: BigInt
  txHash: String
}

type GoldAuction @entity {
  id: ID!
  type: GoldOrderType!
  status: AuctionStatus!
  seller: User!
  price: BigInt!
  amount: BigInt!
  created: BigInt!
  buyer: User
  purchaseAmount: BigInt
  ended: BigInt
  txHash: String
}

type Battle @entity {
  id: ID!
  seed: String!
  attackerDragon: Dragon!
  defenderDragon: Dragon!
  winnerDragon: Dragon!
  looserDragon: Dragon!
  winnerUser: User!
  looserUser: User!
  date: BigInt!
  gladiatorBattle: GladiatorBattle
  winnerDragonSnapshot: DragonBattleSnapshot!
  looserDragonSnapshot: DragonBattleSnapshot!
  attackerDragonSnapshot: DragonBattleSnapshot!
  defenderDragonSnapshot: DragonBattleSnapshot!
}

type DragonBattleSnapshot @entity {
  id: ID!
  level: Int!
  coolness: BigInt!
  healthAndMana: BattleHealthAndMana!
  skills: DragonSkill!
  buffs: [BigInt!]
  tactics: DragonTactic! # TODO: tactic
  strength: BigInt!
  specialAttack: DragonSpecialAttack!
  specialDefense: DragonSpecialDefense!
}

type GladiatorBattle @entity {
  id: ID!
  status: GladiatorBattleStatus!
  bet: BigInt!
  currency: Currency!
  creatorDragon: Dragon!
  opponentDragon: Dragon
  applicantsDragons: [Dragon!]
}

enum GladiatorBattleStatus {
  created
  applicantsAdded
  opponentSelected
  conducted
  canceled
}

enum DragonType {
  water
  fire
  air
  earth
  magic
}

enum AuctionStatus {
  active
  canceled
  fulfilled
}

enum AuctionType {
  dragonSale
  eggSale
  dragonBreeding
}

enum Currency {
  gold
  ether
}

enum GoldOrderType {
  sell
  buy
}
